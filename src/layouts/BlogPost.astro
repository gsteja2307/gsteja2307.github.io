---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '@/components/FormattedDate';
import BaseLayout from '@/layouts/BaseLayout';
import Tag from '@/components/Tag';
import type { MarkdownHeading } from 'astro';
import { Image } from 'astro:assets';

type Props = {
	id: CollectionEntry<'blog'>['id'];
	data: CollectionEntry<'blog'>['data'];
	headings: MarkdownHeading[];
	readTime: string;
};

const { data, readTime, headings, id } = Astro.props;
const { title, description, pubDate, heroImage, tags } = data;

const articleDate = pubDate.toISOString();
---

<BaseLayout
	title={title}
	description={description}
	image={heroImage?.src}
	articleDate={articleDate}
>
	<article class="min-w-full sm:max-w-none md:max-w-none md:py-4">
		<header class="mb-3 flex flex-col items-center justify-center gap-6">
			<div class="flex flex-col gap-2">
				<div class="flex items-center justify-center gap-x-1">
					<p class="text-center text-sm text-opacity-50">
						Published <FormattedDate date={pubDate} />
					</p>
					<p class="text-center text-sm font-bold text-opacity-50">
						- {readTime}
					</p>
				</div>
				<h1 class="text-center text-4xl font-semibold md:pb-2.5 md:text-6xl">
					{title}
				</h1>
			</div>

			<div class="flex flex-wrap items-center justify-center gap-2 gap-y-4 md:gap-5">
				{tags.map((tag) => <Tag tag={tag} />)}
			</div>
		</header>

		<>
			{
				heroImage && (
					<Image
						src={heroImage}
						width={1000}
						height={500}
						quality={100}
						format="jpg"
						loading="eager"
						class="my-8 max-h-[300px] w-full  rounded-md object-contain md:max-h-[500px]"
						alt={`img of ${title}`}
					/>
				)
			}
		</>

		<hr />

		<div>
			<slot />
		</div>
	</article>
</BaseLayout>

<script>
	const initTOC = () => {
		let currentActive = null;

		function scrollTOCToActive(activeLink) {
			if (!activeLink) return;

			const tocContainer = document.querySelector('aside nav div');
			if (!tocContainer) return;

			const containerRect = tocContainer.getBoundingClientRect();
			const linkRect = activeLink.getBoundingClientRect();

			// Check if link is outside visible area
			const isAbove = linkRect.top < containerRect.top;
			const isBelow = linkRect.bottom > containerRect.bottom;

			if (isAbove || isBelow) {
				// Calculate position to center the active item with some offset for context
				const linkTop = activeLink.offsetTop;
				const containerHeight = tocContainer.clientHeight;
				const targetScroll = linkTop - (containerHeight / 2) + (activeLink.offsetHeight / 2);

				// Smooth scroll to position
				tocContainer.scrollTo({
					top: Math.max(0, targetScroll),
					behavior: 'smooth'
				});
			}
		}

		function updateActiveLink(activeHeading) {
			// Remove previous active
			if (currentActive) {
				currentActive.classList.remove('bg-indigo-600', 'dark:bg-indigo-700', 'text-white', 'font-bold');
				currentActive.classList.add('bg-slate-200', 'dark:bg-slate-800');
			}

			// Set new active
			const newActive = document.querySelector(`aside a[href="#${activeHeading.id}"]`);
			if (newActive) {
				newActive.classList.remove('bg-slate-200', 'dark:bg-slate-800');
				newActive.classList.add('bg-indigo-600', 'dark:bg-indigo-700', 'text-white', 'font-bold');
				currentActive = newActive;

				// Scroll TOC to keep active item visible
				scrollTOCToActive(newActive);
			}
		}

		function findActiveHeading() {
			const headings = document.querySelectorAll('article h1, article h2, article h3, article h4, article h5, article h6');
			let activeHeading = null;

			// Find the heading closest to the top of the viewport
			for (const heading of headings) {
				const rect = heading.getBoundingClientRect();
				if (rect.top <= window.innerHeight * 0.3) { // Consider headings in top 30% of viewport
					activeHeading = heading;
				} else {
					break;
				}
			}

			return activeHeading || headings[0]; // Default to first heading
		}

		function handleScroll() {
			const activeHeading = findActiveHeading();
			if (activeHeading && (!currentActive || !currentActive.href.includes(activeHeading.id))) {
				updateActiveLink(activeHeading);
			}
		}

		// Initialize
		handleScroll();

		// Listen to scroll with throttling
		let scrollTimeout;
		window.addEventListener('scroll', () => {
			if (scrollTimeout) return;
			scrollTimeout = setTimeout(() => {
				handleScroll();
				scrollTimeout = null;
			}, 50);
		}, { passive: true });
	};

	initTOC();
	document.addEventListener('astro:after-swap', initTOC);
</script>
