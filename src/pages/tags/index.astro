---
import BaseLayout from '@/layouts/BaseLayout'
import TitlePage from '@/components/TitlePage'
import { getTagsWithCount, getPosts } from '@/utils'

const tagsWithCount = await getTagsWithCount()
const posts = await getPosts()
const totalPosts = posts.length
const totalTags = tagsWithCount.length
---

<BaseLayout title='Tags'>
	<div class="container mx-auto px-4 py-8 max-w-6xl">
		<TitlePage title='Tags' icon='tag' />

		<!-- Stats Section -->
		<div class="mb-12 grid grid-cols-1 md:grid-cols-3 gap-6">
			<div class="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-xl p-6 border border-blue-200/50 dark:border-blue-700/30">
				<div class="flex items-center space-x-3">
					<div class="bg-blue-500 text-white p-3 rounded-lg">
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
						</svg>
					</div>
					<div>
						<p class="text-sm text-blue-600 dark:text-blue-400 font-medium">Total Tags</p>
						<p class="text-2xl font-bold text-blue-900 dark:text-blue-100">{totalTags}</p>
					</div>
				</div>
			</div>

			<div class="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-xl p-6 border border-purple-200/50 dark:border-purple-700/30">
				<div class="flex items-center space-x-3">
					<div class="bg-purple-500 text-white p-3 rounded-lg">
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
						</svg>
					</div>
					<div>
						<p class="text-sm text-purple-600 dark:text-purple-400 font-medium">Total Posts</p>
						<p class="text-2xl font-bold text-purple-900 dark:text-purple-100">{totalPosts}</p>
					</div>
				</div>
			</div>

			<div class="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-xl p-6 border border-green-200/50 dark:border-green-700/30">
				<div class="flex items-center space-x-3">
					<div class="bg-green-500 text-white p-3 rounded-lg">
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
						</svg>
					</div>
					<div>
						<p class="text-sm text-green-600 dark:text-green-400 font-medium">Most Used Tag</p>
						<p class="text-lg font-bold text-green-900 dark:text-green-100 capitalize">
							{tagsWithCount[0]?.tag || 'None'} ({tagsWithCount[0]?.count || 0})
						</p>
					</div>
				</div>
			</div>
		</div>

		<!-- Search and Filter -->
		<div class="mb-8">
			<div class="relative max-w-md mx-auto">
				<input
					type="text"
					id="tagSearch"
					placeholder="Search tags..."
					class="w-full px-4 py-3 pl-10 pr-4 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
				/>
				<div class="absolute inset-y-0 left-0 flex items-center pl-3">
					<svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
				</div>
			</div>
		</div>

		<!-- Popular Tags (Top 5) -->
		<div class="mb-12">
			<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
				<svg class="w-6 h-6 mr-2 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
					<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
				</svg>
				Popular Tags
			</h2>
			<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
				{tagsWithCount.slice(0, 5).map((tagData) => (
					<a
						href={`/tags/${tagData.tag}`}
						class="group relative bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 rounded-xl p-6 border border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-lg transform hover:scale-105 transition-all duration-300"
					>
						<div class="flex items-center justify-between mb-2">
							<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 group-hover:bg-blue-200 dark:group-hover:bg-blue-800">
								#{tagData.tag}
							</span>
							<span class="text-sm text-gray-500 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400">
								{tagData.count} {tagData.count === 1 ? 'post' : 'posts'}
							</span>
						</div>
						<div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
							<div
								class="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-500"
								style={`width: ${(tagData.count / tagsWithCount[0].count) * 100}%`}
							></div>
						</div>
					</a>
				))}
			</div>
		</div>

		<!-- All Tags -->
		<div class="mb-8">
			<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
				<svg class="w-6 h-6 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
				</svg>
				All Tags
			</h2>
			<div id="tagsContainer" class="flex flex-wrap gap-3">
				{tagsWithCount.map((tagData) => (
					<a
						href={`/tags/${tagData.tag}`}
						class="tag-item group inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600 hover:border-blue-300 dark:hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 hover:text-blue-700 dark:hover:text-blue-300 transition-all duration-200 transform hover:scale-105"
						data-tag={tagData.tag.toLowerCase()}
					>
						<span class="mr-2">#</span>
						<span class="capitalize">{tagData.tag}</span>
						<span class="ml-2 px-2 py-0.5 text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded-full group-hover:bg-blue-100 dark:group-hover:bg-blue-800 group-hover:text-blue-600 dark:group-hover:text-blue-300">
							{tagData.count}
						</span>
					</a>
				))}
			</div>
		</div>

		<!-- No results message -->
		<div id="noResults" class="hidden text-center py-12">
			<svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
			</svg>
			<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No tags found</h3>
			<p class="text-gray-500 dark:text-gray-400">Try adjusting your search terms.</p>
		</div>
	</div>

	<script>
		// Search functionality
		const searchInput = document.getElementById('tagSearch');
		const tagsContainer = document.getElementById('tagsContainer');
		const noResults = document.getElementById('noResults');
		const tagItems = document.querySelectorAll('.tag-item');

		searchInput?.addEventListener('input', (e) => {
			const searchTerm = e.target.value.toLowerCase().trim();
			let visibleCount = 0;

			tagItems.forEach(item => {
				const tagName = item.getAttribute('data-tag');
				if (tagName?.includes(searchTerm)) {
					item.style.display = 'inline-flex';
					visibleCount++;
				} else {
					item.style.display = 'none';
				}
			});

			// Show/hide no results message
			if (visibleCount === 0 && searchTerm !== '') {
				noResults?.classList.remove('hidden');
				tagsContainer?.classList.add('hidden');
			} else {
				noResults?.classList.add('hidden');
				tagsContainer?.classList.remove('hidden');
			}
		});

		// Add entrance animations
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.style.opacity = '1';
					entry.target.style.transform = 'translateY(0)';
				}
			});
		});

		tagItems.forEach((item, index) => {
			item.style.opacity = '0';
			item.style.transform = 'translateY(20px)';
			item.style.transition = `all 0.6s ease ${index * 0.1}s`;
			observer.observe(item);
		});
	</script>
</BaseLayout>
